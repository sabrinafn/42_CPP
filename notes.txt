References:
    - https://cplusplus.com/doc/oldtutorial/
    - https://www.w3schools.com/cpp/
    - https://www.geeksforgeeks.org/operator-overloading-cpp/

The Orthodox Canonical Class Form (Forma Canônica Ortodoxa de Classe)
    - Default constructor: basicamente, declarando e inicializando com valores
        padrões os atributos dentro da classe.
    - Copy constructor: usado para criar e inicializar uma cópia 
        (deep copy) de um objeto e seus atributos.
    - Copy assignment operator:  o "Operador de Atribuição de Cópia" é a 
        implementação de como o sinal de igual (=) funciona para atribuir
         o estado de um objeto a outro objeto existente da mesma classe. 
    - Destructor: deletar um objeto; liberar memória.
    - Example: 
        class MyClass {
            private:
                char* data;
                size_t length;

            public:
                // Default Constructor
                MyClass();

                // Copy Constructor
                MyClass(const MyClass& other);

                // Copy Assignment Operator
                MyClass& operator=(const MyClass& other);

                // Destructor
                ~MyClass();
        };

        Class: declaration
        Object: instance of a class

Stack and Heap Memory
    
    Stack: stores local variables - do not allocate
    - stack has a fixed size, much smaller than the heap
    - allocation and deallocation on the stack is done automatically
    - every time a function is called, a new variable is declared, 
        stack memory is allocated for the function and whenever a new variable
        is declared then more stack memory is allocated for use.
    - memory is allocated when a function is called and deallocated when the function returns

    Associations: Stack = Plates (pratos guardados no armário da cozinha)
                    = Automatic, Local, Fast, Small.

    Heap: dynamic memory to be allocated
    - allocation and deallocation is done by the programmer
    - it's good for data that needs to be used out of a function scope
    - heap has more space than the stack
    
    Associations: Heap = Heap (pilha de roupas) = Manual, Persistent, Slower, Large.

Access Specifiers

    Public: attributes and methods can be accessed and modified from outside the code of
        its class. For example, in the main() or other classes' methods.
    Private: attributes and methods can only be accessed and modified inside the code of
        its class. These members cannot be accessed (or viewed) from outside the class.
        By default, all members of a class are private, unless an access specifier is mentioned.
        The access is allowed by functions that are defined within the class block.
    Protected: members cannot be accessed outside the class, however, they can be accessed
        in inherited classes.

References

    - References are declared using the '&'. For example: int& reference;
    - Declaration and initialization must be done at the same time. For 
        example, int x = 10; int& ref = x;
    - It cannot be initialized to NULL
    - It cannot be reassigned to refer to a different variable after initialization, 
        it will be bound to the same object for the rest of its life.
    - It must always refer to a valid object.
    - Access is direct, as if it were the original variable
    - It does not have a different memory address, it occupies the same location as
        the variable it is referencing.

    Associations:
        - references == aka
                     == pseudonym
                     == nickname

Function Pointers

    - A function pointer store the memory address of a function's code.

Fixed Point Number

    - It establishes that there is a fixed number of digits after the
        decimal point. On the other hand, a floating point number can
        vary on the number of digits after the decimal point.
    - It is stored as a integer in memory, but I am the one who
        interprets this number as a fixed-point value in calculations.
    - A classe Fixed que criei eh uma maneira de representar numeros 
        nao-inteiros usando apenas inteiros.

        https://www.h-schmidt.net/FloatConverter/IEEE754.html

Operator overloading (sobrecarga de operador)

    - It is an idea of giving special meaning to an existing operator 
        without changing its original meaning.
    - The name of an operator function is always the operator key
        word followed by the symbol of the operator, and operator
        functions are called when the corresponding operator is used.

Pure Virtual Function
    A pure virtual function is specified by placing "= 0" in its declaration.
    The purpose of an abstract class (often referred to as an ABC) is to provide an appropriate base class from which other classes can inherit.
    Abstract classes cannot be used to instantiate objects and serves only as an interface.

Exception classes
    https://medium.com/@hixcoder/exception-classes-in-c-b57ecc8a7f2d

Casts
    C-style cast -> char a; (int)a;

    casting operators:

    static_cast -> 
        - static_cast<type>(expression)
        - non-polymorphic type conversion
        - can be used to upcast and downcast a 
            pointer/reference of a derived class to a base class
        - it does not perform safety checks, it can lead to undefined behavior.

        float f = 10.5;
        int i;
        i = f; // implicit conversion
        i = static_cast<int>(f) // static cast

    const_cast ->
        - const_cast<type>(expression)
        - it does not change types.
        - it changes if a variable is const or not.

    reintepret_cast ->
        - reintepret_cast<type>(expression)
        - do the conversion no matter what. (dangerous cast)
        - produces a value of new type with the same bit pattern
            as the previous patten


    dynamic_cast ->
        - dynamic_cast<type>(expression)
        - downcasting
        - converting a derived class to a base class

scalar type
    - a variable type that holds a single value inside of it
    examples: char, int, float, double

    scalar literal -> it's when you write a value of scalar type in the code

Templates
    - Templates let you write a function or class that works with 
        different data types.

list of exceptions:
    https://en.cppreference.com/w/cpp/error/exception.html

Data Structures 

    https://www.w3schools.com/cpp/cpp_data_structures.asp
    https://cplusplus.com/reference/algorithm/

Containers c++98:

    Array<T, size>
        - fixed size array
        - elements can be accessed by index and iterator

    Vector<T>:
        - resizable dynamic array
        - elements can be accessed by index and iterator

    List<T>:
        - double linked list like in c
        - elements cannot be accessed by index, only iterator

    Deque<T>:
        - dynamic array of fixed-size
        - elements can be accessed by index and iterator
        - almost same interface as Vector
        - double ended like list

    Stack<T>:
        - stack of plates
        - LIFO: last in - first out
        - elements cannot be accessed by index or iterator

    Queue<T>:
        - people lining up at the cashier
        - container adaptor, inherit from std::deque or std::list
        - FIFO: first in - first out
        - sequential order
        - elements cannot be accessed by index or iterator

    Set<T>:
        - implemented using Red-Black Tree
        - sorted automatically in ascending order
        - unique values only
        - values cannot be changed
        - elements cannot be accessed by index, only with iterator

    Map<T>:
        - implemented using Red-Black Tree
        - stores elements like 'map[key] = value'
        - accessible by keys and iterator
        - allows duplicate values
        - sorted elements

    methods beign and end
        begin(): points to the first element
        end(): points to one position after last element

    Iterators
        - used to access elements of data structures

    Some algorithms methods:
        - sort()
        - find()


    https://medium.com/sisgrammers/stl-containers-in-c-a95d0b0aa45a
    https://hackingcpp.com/cpp/cheat_sheets.html
    https://stackoverflow.com/questions/10699265/how-can-i-efficiently-select-a-standard-library-container-in-c11
    https://www.w3schools.com/cpp/cpp_data_structures.asp
    https://stackoverflow.com/questions/1436020/whats-the-difference-between-deque-and-list-stl-containers

Random:

    1. Divisible by 4:
    If a year is evenly divisible by 4, it's generally a leap year (e.g., 1992, 2000, 2004). 
    2. Divisible by 100:
    However, if a year is divisible by 100 (e.g., 1900, 2000), it's not a leap year, unless it also meets the next condition. 
    3. Divisible by 400:
    If a year is divisible by both 100 and 400 (e.g., 1600, 2000), it is a leap year. 

    RPN: 
    https://medium.com/@interviewbuddies/reverse-polish-notation-b88524252960
