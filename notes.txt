References:
    - https://cplusplus.com/doc/oldtutorial/
    - https://www.w3schools.com/cpp/

Class: declaration
Object: instance of a class

The Orthodox Canonical Class Form (Forma Canônica Ortodoxa de Classe)
    - Default constructor: basicamente, declarando e inicializando com valores
        padrões os atributos dentro da classe.
    - Copy constructor: usado para criar e inicializar uma cópia 
    (deep copy) de um objetos e seus atributos.
    - Copy assignment operator: usado para modificar um objeto que já existe
        com os valores dos atributos de outro objeto. 
    - Destructor: deletar um objeto; liberar memória.
    - Example: 
        class MyClass {
            private:
                char* data;
                size_t length;

            public:
                // Default Constructor
                MyClass();

                // Copy Constructor
                MyClass(const MyClass& other);

                // Copy Assignment Operator
                MyClass& operator=(const MyClass& other);

                // Destructor
                ~MyClass();
        };

Stack and Heap Memory
    
    Stack: stores local variables - do not allocate
    - stack has a fixed size, much smaller than the heap
    - allocation and deallocation on the stack is done automatically
    - every time a function is called, a new variable is declared, 
        stack memory is allocated for the function and whenever a new variable
        is declared then more stack memory is allocated for use.
    - memory is allocated when a function is called and deallocated when the function returns

    Associations: Stack = Plates (pratos guardados no armário da cozinha)
                    = Automatic, Local, Fast, Small.

    Heap: dynamic memory to be allocated
    - allocation and deallocation is done by the programmer
    - it's good for data that needs to be used out of a function scope
    - heap has more space than the stack
    
    Associations: Heap = Heap (pilha de roupas) = Manual, Persistent, Slower, Large.

Access Specifiers

    Public: attributes and methods can be accessed and modified from outside the code of
        its class. For example, in the main() or other classes' methods.
    Private: attributes and methods can only be accessed and modified inside the code of
        its class. These members cannot be accessed (or viewed) from outside the class.
        By default, all members of a class are private, unless an access specifier is mentioned.
        The access is allowed by functions that are defined within the class block.
    Protected: members cannot be accessed outside the class, however, they can be accessed
        in inherited classes.

C++ References x Pointers

    - References are declared using the '&'. For example: int& reference;
    - Declaration and initialization must be done at the same time. For 
        example, int x = 10; int& ref = x;
    - It cannot be initialized to NULL
    - It cannot be reassigned to refer to a different variable after initialization, 
        it will be bound to the same object for the rest of its life.
    - It must always refer to a valid object.
    - Access is direct, as if it were the original variable
    - It does not have a different memory address, it occupies the same location as
        the variable it is referencing.

    Associations:
        - references == aka
                     == pseudonym
                     == nickname